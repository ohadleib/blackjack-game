{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","deck","dealer","player","wallet","inputValue","currentBet","gameOver","message","cards","suits","i","length","j","push","number","suit","playerCard1","this","getRandomCard","dealerCard1","updatedDeck","playerCard2","playerStartingHand","randomCard","dealerStartingHand","count","getCount","type","generateDeck","dealCards","setState","randomIndex","Math","floor","random","splice","rearranged","forEach","card","unshift","reduce","total","pop","draw","dealerDraw","winner","getWinner","e","target","value","console","log","keyCode","placeBet","startNewGame","document","querySelector","addEventListener","handleKeyDown","bind","card1","className","onClick","hit","stand","name","placeholder","onChange","inputChange","map","key","React","Component","Card","combo","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b6d60240.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      deck: [],\n      dealer: null,\n      player: null,\n      wallet: 0,\n      inputValue: '',\n      currentBet: null,\n      gameOver: false,\n      message: null\n    };\n  }\n\n  generateDeck() {\n    const cards = [2,3,4,5,6,7,8,9,10,'J','Q','K','A'];\n    const suits = ['♦','♣','♥','♠'];\n    const deck = [];\n    for (let i = 0; i < cards.length; i++) {\n      for (let j = 0; j < suits.length; j++) {\n        deck.push({number: cards[i], suit: suits[j]});\n      }\n    }\n    return deck;\n  }\n  \n  dealCards(deck) {\n    const playerCard1 = this.getRandomCard(deck);\n    const dealerCard1 = this.getRandomCard(playerCard1.updatedDeck);\n    const playerCard2 = this.getRandomCard(dealerCard1.updatedDeck);    \n    const playerStartingHand = [playerCard1.randomCard, playerCard2.randomCard];\n    const dealerStartingHand = [dealerCard1.randomCard, {}];\n    \n    const player = {\n      cards: playerStartingHand,\n      count: this.getCount(playerStartingHand)\n    };\n    const dealer = {\n      cards: dealerStartingHand,\n      count: this.getCount(dealerStartingHand)\n    };\n    \n    return {updatedDeck: playerCard2.updatedDeck, player, dealer};\n  }\n\n  startNewGame(type) {\n    if (type === 'continue') {\n      if (this.state.wallet > 0) {\n        const deck = (this.state.deck.length < 10) ? this.generateDeck() : this.state.deck;\n        const { updatedDeck, player, dealer } = this.dealCards(deck);\n\n        this.setState({\n          deck: updatedDeck,\n          dealer,\n          player,\n          currentBet: null,\n          gameOver: false,\n          message: null\n        });\n      } else {\n        this.setState({ message: 'Game over' });\n      }\n    } else {\n      const deck = this.generateDeck();\n      const { updatedDeck, player, dealer } = this.dealCards(deck);\n\n      this.setState({\n        deck: updatedDeck,\n        dealer,\n        player,\n        wallet: 100,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      });\n    }\n  }\n       \n  getRandomCard(deck) {\n    const updatedDeck = deck;\n    const randomIndex = Math.floor(Math.random() * updatedDeck.length);\n    const randomCard = updatedDeck[randomIndex];\n    updatedDeck.splice(randomIndex, 1);\n    return { randomCard, updatedDeck };\n  }\n  \n  placeBet() {\n    const currentBet = this.state.inputValue;\n\n    if (currentBet > this.state.wallet) {\n      this.setState({ message: 'There is not enough in the wallet' });\n    } else if (currentBet % 1 !== 0) {\n      this.setState({ message: 'numbers only.' });\n    } else {\n      // Deduct current bet from wallet\n      const wallet = this.state.wallet - currentBet;\n      this.setState({ wallet, inputValue: '', currentBet });\n    }\n  }\n  \n  hit() {\n    if (!this.state.gameOver) {\n      if (this.state.currentBet) {\n        const { randomCard, updatedDeck } = this.getRandomCard(this.state.deck);\n        const player = this.state.player;\n        player.cards.push(randomCard);\n        player.count = this.getCount(player.cards);\n\n        if (player.count > 21) {\n          this.setState({ player, gameOver: true, message: 'BUST!' });\n        } else {\n          this.setState({ deck: updatedDeck, player });\n        }\n      } else {\n        this.setState({ message: 'Please place bet.' });\n      }\n    } else {\n      this.setState({ message: 'Game over' });\n    }\n  }\n  \n  dealerDraw(dealer, deck) {\n    const { randomCard, updatedDeck } = this.getRandomCard(deck);\n    dealer.cards.push(randomCard);\n    dealer.count = this.getCount(dealer.cards);\n    return { dealer, updatedDeck };\n  }\n  \n  getCount(cards) {\n    const rearranged = [];\n    cards.forEach(card => {\n      if (card.number === 'A') {\n        rearranged.push(card);\n      } else if (card.number) {\n        rearranged.unshift(card);\n      }\n      \n      \n      // (card.number === 'A') ? rearranged.push(card) : rearranged.unshift(card);\n    });\n    \n    return rearranged.reduce((total, card) => {\n      if (card.number === 'J' || card.number === 'Q' || card.number === 'K') {\n        return total + 10;\n      } else if (card.number === 'A') {\n        return (total + 11 <= 21) ? total + 11 : total + 1;\n      } else {\n        return total + card.number;\n      }\n    }, 0);\n  }\n  \n  stand() {\n    if (!this.state.gameOver) {\n      // Show dealer's 2nd card\n      const randomCard = this.getRandomCard(this.state.deck);\n      let deck = randomCard.updatedDeck;\n      let dealer = this.state.dealer;\n      dealer.cards.pop();\n      dealer.cards.push(randomCard.randomCard);\n      dealer.count = this.getCount(dealer.cards);\n\n      // Keep drawing cards until count is 17 or more\n      while(dealer.count < 17) {\n        const draw = this.dealerDraw(dealer, deck);\n        dealer = draw.dealer;\n        deck = draw.updatedDeck;\n      }\n\n      if (dealer.count > 21) {\n        this.setState({\n          deck,\n          dealer,\n          wallet: this.state.wallet + this.state.currentBet * 2,\n          gameOver: true,\n          message: 'You win!'\n        });\n      } else {\n        const winner = this.getWinner(dealer, this.state.player);\n        let wallet = this.state.wallet;\n        let message;\n        \n        if (winner === 'dealer') {\n          message = 'Dealer win';\n        } else if (winner === 'player') {\n          wallet += this.state.currentBet * 2;\n          message = 'You win!';\n        } else {\n          wallet += this.state.currentBet;\n          message = 'Push.';\n        }\n        \n        this.setState({\n          deck, \n          dealer,\n          wallet,\n          gameOver: true,\n          message\n        });\n      } \n    } else {\n      this.setState({ message: 'Game over' });\n    }\n  }\n  \n  getWinner(dealer, player) {\n    if (dealer.count > player.count) {\n      return 'dealer';\n    } else if (dealer.count < player.count) {\n      return 'player';\n    } else {\n      return 'push';\n    }\n  }\n  \n  inputChange(e) {\n    const inputValue = +e.target.value;\n    this.setState({inputValue});\n  }\n  \n  handleKeyDown(e) {\n    const enter = 13;\n    console.log(e.keyCode);\n    \n    if (e.keyCode === enter) {\n      this.placeBet();\n    }\n  }\n  \n  componentWillMount() {\n    this.startNewGame();\n    const body = document.querySelector('body');\n    body.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n  \n  render() {\n    let dealerCount;\n    const card1 = this.state.dealer.cards[0].number;\n    const card2 = this.state.dealer.cards[1].number;\n    if (card2) {\n      dealerCount = this.state.dealer.count;\n    } else {\n      if (card1 === 'J' || card1 === 'Q' || card1 === 'K') {\n        dealerCount = 10;\n      } else if (card1 === 'A') {\n        dealerCount = 11;\n      } else {\n        dealerCount = card1;\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"buttons\">\n          <button className=\"newGame\" onClick={() => {this.startNewGame()}}>New Game</button>\n          <button className=\"open\" onClick={() => {this.hit()}}>Open Card</button>\n          <button onClick={() => {this.stand()}}>Stand</button>\n        </div>\n        \n        <p>Wallet: ${ this.state.wallet }</p>\n        {\n          !this.state.currentBet ? \n          <div className=\"input-bet\">            \n            <form>\n              <input type=\"number\" name=\"bet\" placeholder=\"\" value={this.state.inputValue} onChange={this.inputChange.bind(this)}/>\n            </form>\n            \n          </div>\n          : null\n        }\n        <button className=\"placeBet\" onClick={() => {this.placeBet()}}>Bet</button>\n        {\n          this.state.gameOver ?\n          <div className=\"buttons\">\n            <button onClick={() => {this.startNewGame('continue')}}>Continue</button>\n          </div>\n          : null\n        }\n        <p>Your Hand ({ this.state.player.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.player.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>\n            }) }\n          </tr>\n        </table>\n        \n        <p>Dealer's Hand ({ this.state.dealer.count })</p>\n        <table className=\"cards\">\n          <tr>\n            { this.state.dealer.cards.map((card, i) => {\n              return <Card key={i} number={card.number} suit={card.suit}/>;\n            }) }\n          </tr>\n        </table>\n        \n        <p>{ this.state.message }</p>\n      </div>\n    );\n  }\n};\n\nconst Card = ({ number, suit }) => {\n  const combo = (number) ? `${number}${suit}` : null;\n  const color = (suit === '♦' || suit === '♥') ? 'card-red' : 'card';\n  \n  return (\n    <td>\n      <div className={color}>\n        { combo }\n      </div>\n    </td>\n  );\n};\n\n\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}